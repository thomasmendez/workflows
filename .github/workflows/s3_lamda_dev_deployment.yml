name: S3 Lamda Dev Deployment

on:
  workflow_call:
    inputs:
      AWS_BUCKET_NAME:
        description: 'The name of the AWS bucket'
        required: true
        type: string
      AWS_REGION:
        description: 'The region where the AWS bucket will be deployed to'
        default: 'us-east-2'
        required: false
        type: string
      DIST_NAME:
        description: 'The name of the distribution'
        required: true
        type: string
      DIST_PATH:
        description: 'The name of the distribution path where build is located'
        required: true
        type: string
      AWS_LAMBDA_FUNCTION_S3_KEY:
        description: "Lambda S3 zip name for S3 bucket function"
        required: true
        type: string
      AWS_LAMBDA_FUNCTION_NAME:
        description: "Lambda function name"
        required: true
        type: string
      AWS_LAMBDA_FUNCTION_HANDLER:
        description: "Lambda function handler"
        required: true
        type: string
      AWS_LAMBDA_FUNCTION_RUNTIME:
        description: "Lambda function runtime and version"
        required: true
        type: string
    secrets:
      TF_API_TOKEN:
        description: 'The credentials for Terraform Cloud'
        required: true
      AWS_ACCESS_KEY_ID:
        description: 'The AWS access key obtained from the IAM role'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'The AWS secret access key obtained from the IAM role'
        required: true

jobs:
  configure_s3_dev:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
        with:
          repository: thomasmendez/workflows

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: terraform-fmt
        run: terraform -chdir=terraform/development/lambda/s3 fmt -check

      - name: Terraform Init
        id: terraform-init
        run: terraform -chdir=terraform/development/lambda/s3 init -backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate
        id: terraform-validate
        run: terraform -chdir=terraform/development/lambda/s3 validate -no-color
      
      - name: Terraform Import
        id: terraform-import
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/s3 import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" aws_s3_bucket.bucket_dev ${{ inputs.AWS_BUCKET_NAME }}
        continue-on-error: true

      - name: Terraform Plan
        id: terraform-plan
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/s3 plan -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -no-color

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-remote.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        id: terraform-apply
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/s3 apply -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -auto-approve
  
  sync_s3_dev:
    runs-on: ubuntu-latest
    needs: configure_s3_dev
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Retrieve dist files
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.DIST_NAME }}
          path: ${{ inputs.DIST_PATH }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Deploy static site to S3 bucket
        run: aws s3 sync ${{ inputs.DIST_PATH }} s3://${{ inputs.AWS_BUCKET_NAME }}

  configure_iam_dev:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
        with:
          repository: thomasmendez/workflows

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: terraform-fmt
        run: terraform -chdir=terraform/development/lambda/iam fmt -check

      - name: Terraform Init
        id: terraform-init
        run: terraform -chdir=terraform/development/lambda/iam init -backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate
        id: terraform-validate
        run: terraform -chdir=terraform/development/lambda/iam validate -no-color
      
      - name: Terraform Import
        id: terraform-import
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/iam import -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" aws_iam_role.iam_for_lambda_dev ${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}-lambda-dev
        continue-on-error: true

      - name: Terraform Plan
        id: terraform-plan
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/iam plan -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -no-color

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-remote.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        id: terraform-apply
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/iam apply -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -auto-approve

  configure_lambda_s3_dev:
    runs-on: ubuntu-latest
    needs: [configure_s3_dev, sync_s3_dev, configure_iam_dev]
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
        with:
          repository: thomasmendez/workflows

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: terraform-fmt
        run: terraform -chdir=terraform/development/lambda/function fmt -check

      - name: Terraform Init
        id: terraform-init
        run: terraform -chdir=terraform/development/lambda/function init -backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate
        id: terraform-validate
        run: terraform -chdir=terraform/development/lambda/function validate -no-color
      
      - name: Terraform Import
        id: terraform-import
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/function import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" aws_lambda_function.lambda_dev ${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}
          terraform -chdir=terraform/development/lambda/function import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" aws_lambda_permission.api_gateway_lambda ${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}
          terraform -chdir=terraform/development/lambda/function import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" aws_api_gateway_rest_api.api_gateway_dev ${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}-api-gateway
        continue-on-error: true

      - name: Terraform Plan
        id: terraform-plan
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/function plan -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" -no-color

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-remote.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        id: terraform-apply
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/function apply -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" -auto-approve
