name: S3 Lamda Dev Deployment Cleanup

# Apply cleanup on closed request
# on:
#   pull_request:
#     types: [closed]

on:
  workflow_call:
    inputs:
      AWS_BUCKET_NAME:
        description: 'The name of the AWS bucket'
        required: true
        type: string
      AWS_REGION:
        description: 'The region where the AWS bucket will be deployed to'
        default: 'us-east-2'
        required: false
        type: string
      AWS_LAMBDA_FUNCTION_S3_KEY:
        description: "Lambda S3 zip name for S3 bucket function"
        required: true
        type: string
      AWS_LAMBDA_FUNCTION_NAME:
        description: "Lambda function name"
        required: true
        type: string
      AWS_LAMBDA_FUNCTION_HANDLER:
        description: "Lambda function handler"
        required: true
        type: string
      AWS_LAMBDA_FUNCTION_RUNTIME:
        description: "Lambda function runtime and version"
        required: true
        type: string
    secrets:
      TF_API_TOKEN:
        description: 'The credentials for Terraform Cloud'
        required: true
      AWS_ACCESS_KEY_ID:
        description: 'The AWS access key obtained from the IAM role'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'The AWS secret access key obtained from the IAM role'
        required: true

jobs:
  dev_destroy_lambda:
    runs-on: ubuntu-latest
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
        with:
          repository: thomasmendez/workflows

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=terraform/development/lambda/function fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform/development/lambda/function init -backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform/development/lambda/function validate -no-color

      - name: Terraform Import
        id: terraform-import
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/function import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" aws_lambda_function.lambda_dev ${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}
        # terraform -chdir=terraform/development/lambda/function import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" aws_lambda_permission.api_gateway_lambda "${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}/AllowExecutionFromAPIGateway"
        # terraform -chdir=terraform/development/lambda/function import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" aws_api_gateway_rest_api.api_gateway_dev ${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}-api-gateway
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/function plan -destroy -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" -no-color

      - name: Terraform Destroy
        id: apply
        if: steps.plan.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/function destroy -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -var="lambda_function_s3_key=${{ inputs.AWS_LAMBDA_FUNCTION_S3_KEY }}" -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -var="lambda_function_handler=${{ inputs.AWS_LAMBDA_FUNCTION_HANDLER }}" -var="lambda_function_runtime=${{ inputs.AWS_LAMBDA_FUNCTION_RUNTIME }}" -auto-approve

  dev_destroy_iam:
    runs-on: ubuntu-latest
    needs: dev_destroy_lambda
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
        with:
          repository: thomasmendez/workflows

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=terraform/development/lambda/iam fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform/development/lambda/iam init -backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform/development/lambda/iam validate -no-color

      - name: Terraform Import
        id: terraform-import
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/iam import -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" aws_iam_role.iam_for_lambda_dev ${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}-lambda-dev
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/iam plan -destroy -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -no-color

      - name: Terraform Destroy
        id: apply
        if: steps.plan.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/iam destroy -var="lambda_function_name=${{ inputs.AWS_LAMBDA_FUNCTION_NAME }}" -auto-approve

  dev_destroy_s3:
    runs-on: ubuntu-latest
    needs: [dev_destroy_lambda, dev_destroy_iam]
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
        with:
          repository: thomasmendez/workflows

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=terraform/development/lambda/s3 fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform/development/lambda/s3 init -backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform/development/lambda/s3 validate -no-color

      - name: Terraform Import
        id: terraform-import
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/s3 import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" aws_s3_bucket.bucket_dev ${{ inputs.AWS_BUCKET_NAME }}
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/s3 plan -destroy -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -no-color

      - name: Terraform Destroy
        id: apply
        if: steps.plan.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/lambda/s3 apply -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -auto-approve
          terraform -chdir=terraform/development/lambda/s3 destroy -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -auto-approve
