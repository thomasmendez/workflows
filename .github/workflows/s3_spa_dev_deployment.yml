name: S3 SPA Dev Deployment

on:
  workflow_call:
    inputs:
      AWS_BUCKET_NAME:
        description: 'The name of the AWS bucket'
        required: true
        type: string
      AWS_REGION:
        description: 'The region where the AWS bucket will be deployed to'
        default: 'us-east-2'
        required: false
        type: string
      DIST_NAME:
        description: 'The name of the distribution'
        required: true
        type: string
      DIST_PATH:
        description: 'The name of the distribution path where build is located'
        required: true
        type: string
    secrets:
      TF_API_TOKEN:
        description: 'The credentials for Terraform Cloud'
        required: true
      AWS_ACCESS_KEY_ID:
        description: 'The AWS access key obtained from the IAM role'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'The AWS secret access key obtained from the IAM role'
        required: true

jobs:
  configure_s3_dev:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
        with:
          repository: thomasmendez/workflows

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format - Existing Bucket
        id: fmt-remote
        run: terraform -chdir=terraform/development/spa/remote fmt -check

      - name: Terraform Init - Existing Bucket
        id: init-remote
        run: terraform -chdir=terraform/development/spa/remote init -backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate - Existing Bucket
        id: validate-remote
        run: terraform -chdir=terraform/development/spa/remote validate -no-color

      - name: Terraform Plan - Existing Bucket
        id: plan-remote
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/spa/remote plan -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -no-color
        continue-on-error: true

      - name: Update Pull Request - Existing Bucket
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-remote.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Format - Create Bucket
        id: fmt-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/spa/create fmt -check

      - name: Terraform Init - Create Bucket
        id: init-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/spa/create init -backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate - Create Bucket
        id: validate-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/spa/create validate -no-color

      - name: Terraform Plan - Create Bucket
        id: plan-create
        if: steps.plan-remote.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/spa/create plan -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -no-color
        continue-on-error: true

      - name: Update Pull Request - Create Bucket
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && steps.plan-remote.outcome == 'failure'
        env:
          PLAN: "terraform\n${{ steps.plan-create.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status - Existing Bucket && Create Bucket
        if: steps.plan-remote.outcome == 'failure' && steps.plan-create.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply - Existing Bucket
        id: apply-remote
        if: steps.plan-remote.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/spa/remote import -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" aws_s3_bucket.bucketdev ${{ inputs.AWS_BUCKET_NAME }}
          terraform -chdir=terraform/development/spa/remote apply -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -auto-approve

      - name: Terraform Apply - Create Bucket
        id: apply-create
        if: steps.plan-create.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ inputs.AWS_REGION }}"
          terraform -chdir=terraform/development/spa/create apply -var="aws_bucket_name=${{ inputs.AWS_BUCKET_NAME }}" -auto-approve

  sync_s3_dev:
    runs-on: ubuntu-latest
    needs: configure_s3_dev
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Retrieve dist files
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.DIST_NAME }}
          path: ${{ inputs.DIST_PATH }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Deploy static site to S3 bucket
        run: aws s3 sync ${{ inputs.DIST_PATH }} s3://${{ inputs.AWS_BUCKET_NAME }}